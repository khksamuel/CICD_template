version: 2.1
jobs:
  build:
    docker:
      - image: cimg/go:1.16
      - image: cimg/mysql:8.0
        environment:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: passw0rd
    parallelism: 1
    steps:
      - checkout
      
    # Below two steps are required to setup sonarqube and run sonar scanner
      - run:
          name: Install SonarQube Scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
            unzip sonar-scanner-cli-4.6.2.2472-linux.zip
            mv sonar-scanner-4.6.2.2472-linux /home/circleci/sonar-scanner
            echo 'export SONAR_SCANNER_HOME=/home/circleci/sonar-scanner' >> $BASH_ENV
            echo 'export PATH=$PATH:$SONAR_SCANNER_HOME/bin' >> $BASH_ENV
            source $BASH_ENV
            rm sonar-scanner-cli-4.6.2.2472-linux.zip
      
      # Run SonarQube analysis
      - run:
          name: SonarQube Analysis
          command: |
            # You can specify the path to the sonar-project.properties file if not in the root directory:
            sonar-scanner -Dsonar.projectSettings=sonar-project.properties
      - restore_cache:
          keys:
            - go-mod-v4-{{ checksum "go.sum" }}
      - run:
          name: Waiting for MYSQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Build repo
          command: |
            go build main.go
      - save_cache:
          key: go-mod-v4-{{ checksum "go.sum" }}
          paths:
            - "go/pkg/mod"
      - run:
          name: Start the service
          command: ./main
          background: true
      - run:
          name: Validate if the service is working
          command: |
            sleep 5
            curl http://localhost:8080/health-check
  test:
    working_directory: ~/circleci-python
    docker:
      - image: "circleci/python:3.6.4"
    steps:
      - checkout
      - run: python3 src/test_add.py
workflows:
  version: 2
  workflow:
    jobs:
      - build:
          context: dashboard
      - test